import logging
from telegram import ParseMode, Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from MongoDBAPI.MongoDBAPI import Mongod
from MongoDBAPI.models import TgUser
from TgBotAPI.Keyboards.default_keyboards import Keyboards
import os
import random


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

category_list = ('development', 'testing', 'administration', 'design', 'marketing', 'various', 'content')


def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if Mongod().check_existing(user_id):
        subscribed = False
    else:
        subscribed = True

    reply_markup = InlineKeyboardMarkup(Keyboards.start_menu(subscribed))

    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π.\n'
                              '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
                              '–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É" –±–æ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å habr.com',
                              reply_markup=reply_markup)

    logger.info(f'User "{user_id}" called the start menu')


def subscribe(mongod, user_id: int):
    if isinstance(user_id, int):
        telegram_user = TgUser()
        telegram_user.id = user_id

        if mongod.add_user_to_db(telegram_user):
            return True
        else:
            return False


def callback_start_menu(update: Update, context: CallbackContext) -> None:
    global category_list
    query = update.callback_query
    query.answer()
    mongod = Mongod()
    user_id = query.from_user.id

    categories_from_db = mongod.get_current_state(user_id)

    if query.data == 'last_tasks':
        last_tasks = mongod.get_last_task(limit=5)
        query.edit_message_text(text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –í–∞—Å, –Ω–∞–¥–µ—é—Å—å –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã")
        for task in last_tasks:
            description = task["description"]
            if len(description) > 300:
                description = description[:300] + '...'
            message = (
                f'üñ•Ô∏è\n'
                f'<b>‚ï†–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{task["name"]}</code>\n'
                f'<b>‚ï†–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {task["date"]}\n'
                f'<b>‚ï†–¶–µ–Ω–∞:</b> {task["price"]}\n'
                f'<b>‚ï†–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {task["views"]}\n'
                f'<b>‚ï†–û—Ç–∫–ª–∏–∫–Ω—É–ª–æ—Å—å:</b> {task["responses"]}\n'
                f'<b>‚ï†–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ:</b> {task["url"]}\n'
                f'<b>‚ïö–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n'
            )
            context.bot.send_message(chat_id=user_id, text=message, disable_web_page_preview=True,
                                     parse_mode=ParseMode.HTML)
        logger.info(f'User "{user_id}" has received the latest tasks')
    if query.data == 'categories':
        if mongod.check_existing(user_id):
            reply_markup = InlineKeyboardMarkup(Keyboards.categories_menu())
            query.edit_message_text(text=get_categories_text(categories_from_db), reply_markup=reply_markup,
                                    parse_mode=ParseMode.HTML)
        else:
            query.edit_message_text(text=f"–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
        logger.info(f'User "{user_id}" went to the categories menu')
    if query.data == 'unsubscribe':
        mongod.delete_user(user_id)
        query.edit_message_text(text=f"–ù–∞–º –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ –≤–º–µ—Å—Ç–µ! –ü–æ–∫–∞! üò¢")
        logger.info(f'User "{user_id}" has unsubscribed')
    if query.data == 'subscribe':
        if subscribe(mongod, user_id):
            username = query.from_user.username
            if not username:
                username = ''
            query.edit_message_text(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {username}!")
        else:
            query.edit_message_text(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ, –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
        logger.info(f'User "{user_id}" subscribed')
    if query.data in category_list:
        mongod.update_state(user_id, query.data)
        get_categories_window(mongod, user_id, query)
        logger.info(f'User "{user_id}" has selected a category "{query.data}"')
    if query.data == 'save_change':
        query.edit_message_text(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
        logger.info(f'User "{user_id}" has finished selecting categories')


def get_categories_window(mongod, user_id, query):
    categories_from_db = mongod.get_current_state(user_id)
    reply_markup = InlineKeyboardMarkup(Keyboards.categories_menu())
    query.edit_message_text(text=get_categories_text(categories_from_db), reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML)


def get_categories_text(categories_from_db):
    text = (
        f'–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å–ª—ã–ª–∫–∏.\n'
        f'–í—ã–±—Ä–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n\n'
    )
    if categories_from_db:
        categories_from_db = ' '.join(categories_from_db)
        categories_part = (
            f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è: <b>{categories_from_db}</b>\n\n'
        )
    else:
        categories_part = (
            f'<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!</b>\n'
        )
    text = text + categories_part
    return text


def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")


def unexpected_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    logger.info(f'Message "{update.message.text}" from "{user_id}"')
    stickers_folder = os.path.join(os.path.curdir, 'TgBotAPI/stickers')
    sticker_list = os.listdir(stickers_folder)
    sticker = random.choice(sticker_list)
    with open(os.path.join(stickers_folder, sticker), 'rb') as s:
        context.bot.sendSticker(user_id, sticker=s)
    text = (
        f'–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ "{update.message.text}"!'
    )
    context.bot.send_message(user_id, text=text)
